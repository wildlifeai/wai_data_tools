# -*- coding: utf-8 -*-
"""wildlifeai-cli-demo-extended.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18u5-NLY3KkrEJAkEDRDbpjvtQMEyvcx1
"""

#upgrade gspread since default version does not support export of worksheet
!pip install --upgrade gspread --quiet

"""# Extended demo for creating edge impulse dataset

This notebook will show you how to install and some more available functions for in the wildlifeai CLI.

To run this you need to do two preparatory steps:
1. Mount your Drive to Colab and make sure that you have added the data as a shortcut to your drive if someone has shared the raw data with you.
2. Export a .xlsx version of the label sheet for the data and upload it to a folder in your drive.

Please make note of the paths to the raw data and to the .xlsx version of the label sheet.
"""

from pathlib import Path

from google.colab import drive

# Run this to mount drive to the Colab session
drive.mount('/content/drive')

import gspread
from google.auth import default

# Run to export the ww_labels sheet to .xlsx format
from google.colab import auth

auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

sheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/1Os-cFB7ZJQK-M4BMyfPTWiVE_14H8ddOZyWMtc2isPQ")
export_bytes = sheet.export(format="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
PATH_TO_EXCEL = "/content/ww_labels.xlsx"
with open(PATH_TO_EXCEL, 'wb') as export_file:
  export_file.write(export_bytes)

# Set this to the path to the root folder containing the raw data
PATH_TO_RAW_DATA = Path("/content/drive/MyDrive/WW_taranaki_labelled")
# Set this to your desired output folder.
PATH_TO_STORE_DATA = Path("/content/frames")

"""## Setup"""

# Commented out IPython magic to ensure Python compatibility.
!git clone -b fixed-opencv-import https://github.com/wildlifeai/wai_data_tools.git
# %cd wai_data_tools
!pip install pipenv
!pipenv lock
!pipenv install
!pipenv run pip install .
!pipenv install ipykernel

!pipenv run wildlifeai-cli --help

# If you want to configure it a different way you can specify the path to a YAML file
# This cell will copy the default config from the repo to the working dir if you
# want to experiment with your own configuration.

CONFIG_PATH = "../config.yml"
!cp /content/wai_data_tools/src/wai_data_tools/configs/default_config.yml {CONFIG_PATH}

# Create frame dataset from raw data
PATH_TO_STORE_DATA.mkdir(exist_ok=True)
!pipenv run wildlifeai-cli create-frame-dataset --excel_filepath {PATH_TO_EXCEL} --src_video_dir {PATH_TO_RAW_DATA} --dst_frame_dir {PATH_TO_STORE_DATA} --config_filepath {CONFIG_PATH}

# This command can be used to reclassify the assigned label to frames using a simple GUI but it does not work on colab.
# !pipenv run wildlifeai-cli reclassify-frames --src_root_dir {PATH_TO_STORE_DATA} --config_filepath {CONFIG_PATH}

# Preprocess frame images
!pipenv run wildlifeai-cli preprocess --config_filepath {CONFIG_PATH} --src_root_dir {PATH_TO_STORE_DATA} --dst_root_dir {PATH_TO_STORE_DATA}

# Copy preprocessed files to upload format
UPLOAD_PATH = PATH_TO_STORE_DATA.parent / "upload"
UPLOAD_PATH.mkdir(exist_ok=True)

!pipenv run wildlifeai-cli to-upload-format --src_root_dir {PATH_TO_STORE_DATA} --dst_root_dir {UPLOAD_PATH} --config_filepath {CONFIG_PATH}

# Copy preprocessed files to label based directory format
LABEL_PATH = PATH_TO_STORE_DATA.parent / "label-based"
LABEL_PATH.mkdir(exist_ok=True)

!pipenv run wildlifeai-cli create-data-structure --config_filepath {CONFIG_PATH} --src_root_dir {PATH_TO_STORE_DATA} --dst_root_dir {LABEL_PATH}
